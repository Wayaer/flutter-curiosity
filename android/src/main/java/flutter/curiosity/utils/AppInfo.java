package flutter.curiosity.utils;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Build;import android.os.Environment;import java.util.HashMap;import java.util.Map;import java.util.Objects;public class AppInfo {    public static Map<String, Object> getAppInfo(Context context) throws PackageManager.NameNotFoundException {        PackageManager appInfo = context.getPackageManager();        PackageInfo info = appInfo.getPackageInfo(context.getPackageName(), 0);        Map<String, Object> map = new HashMap<>();        String filesDir = context.getFilesDir().getPath();        String cacheDir = context.getCacheDir().getPath();        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) || !Environment.isExternalStorageRemovable()) {            map.put("externalCacheDir", Objects.requireNonNull(context.getExternalCacheDir()).getPath() + "");            map.put("externalFilesDir", Objects.requireNonNull(context.getExternalFilesDir(null)).getPath() + "");            map.put("externalStorageDirectory", Environment.getExternalStorageDirectory() + "");            map.put("DIRECTORY_DCIM", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) + "");            map.put("DIRECTORY_DOWNLOADS", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + "");            map.put("DIRECTORY_MOVIES", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES) + "");            map.put("DIRECTORY_MUSIC", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC) + "");            map.put("DIRECTORY_PICTURES", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES) + "");            map.put("DIRECTORY_ALARMS", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_ALARMS) + "");            map.put("DIRECTORY_DOCUMENTS", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS) + "");            map.put("DIRECTORY_NOTIFICATIONS", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_NOTIFICATIONS) + "");            map.put("DIRECTORY_RINGTONES", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_RINGTONES) + "");            map.put("DIRECTORY_PODCASTS", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PODCASTS) + "");        } else {            map.put("externalFilesDir", filesDir);            map.put("externalCacheDir", cacheDir);        }        map.put("filesDir", filesDir);        map.put("cacheDir", cacheDir);        map.put("phoneModel", android.os.Build.MODEL);        map.put("phoneBrand", android.os.Build.BRAND);        map.put("systemVersion", android.os.Build.VERSION.RELEASE);        map.put("sdkVersion", Build.VERSION.SDK_INT);        map.put("appName", info.applicationInfo.loadLabel(appInfo).toString());        map.put("packageName", info.packageName);        map.put("versionCode", info.versionCode);        map.put("versionName", info.versionName);        map.put("buildNumber", getLongVersionCode(info));        map.put("firstInstallTime", info.firstInstallTime);        map.put("lastUpdateTime", info.lastUpdateTime);        map.put("statusBarHeight", NativeUtils.getBarHeight("status_bar_height"));        map.put("navigationBarHeight", NativeUtils.getBarHeight("navigation_bar_height"));        return map;    }    @SuppressWarnings("deprecation")    private static long getLongVersionCode(android.content.pm.PackageInfo info) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {            return info.getLongVersionCode();        }        return info.versionCode;    }}