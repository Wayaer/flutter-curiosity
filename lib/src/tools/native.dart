import 'dart:io';import 'package:flutter_curiosity/flutter_curiosity.dart';import 'package:flutter_curiosity/src/tools/internal.dart';class NativeTools {  ///安装apk  仅支持android  ///success  安装成功  ///cancel  取消安装  ///not permissions  没有打开安装权限  static Future<String> installApp(String apkPath) async {    if (!isAndroid()) return null;    return await curiosityChannel.invokeMethod('installApp', <String, String>{'apkPath': apkPath});  }  ///去应用市场 android 安装多个应用商店时会弹窗选择，ios app store  ///android => packageName  ///ios => app id  ///The android platform "marketPackageName" cannot be null  static Future<void> goToMarket<T>({String packageName, String marketPackageName, String appID}) async {    if (!InternalTools.supportPlatform()) {      if (isIOS()) {        assert(appID != null);        await curiosityChannel.invokeMethod<T>('goToMarket', <String, String>{'appId': appID});      }      if (isAndroid()) {        assert(packageName != null && marketPackageName != null);        if (marketPackageName == null)          await curiosityChannel.invokeMethod<T>(              'goToMarket', <String, String>{'packageName': packageName, 'marketPackageName': marketPackageName});      }    }  }  ///是否安装某个app  仅支持android  static Future<bool> isInstallApp(String packageName) async {    if (isAndroid()) return false;    return await curiosityChannel.invokeMethod('isInstallApp', <String, String>{'packageName': packageName});  }  ///退出app  static Future<void> exitApp<T>() async {    if (!InternalTools.supportPlatform()) await curiosityChannel.invokeMethod<T>('exitApp');  }  ///获取文件夹或文件大小  static Future<String> getFilePathSize(String path) async {    if (InternalTools.supportPlatform()) return null;    return await curiosityChannel.invokeMethod('getFilePathSize', <String, String>{'filePath': path});  }  ///解压文件  static Future<void> unZipFile<T>(String filePath) async {    if (!InternalTools.supportPlatform())      await curiosityChannel.invokeMethod<T>('unZipFile', <String, String>{'filePath': filePath});  }  ///拨打电话  ///directDial true 直接拨打电话 false 跳转到拨号页面并输入手机号  ///directDial 为 true 需要 自行申请动态申请权限  static Future<void> callPhone<T>(String phoneNumber, {bool directDial = false}) async {    if (InternalTools.supportPlatform()) return;    await curiosityChannel        .invokeMethod<T>('callPhone', <String, dynamic>{'phoneNumber': phoneNumber, 'directDial': directDial});  }  ///系统分享  static Future<String> systemShare(      {String title = 'Share', String content, List<String> imagesPath, ShareType shareType}) async {    if (InternalTools.supportPlatform()) return 'not support ${Platform.operatingSystem}';    if (shareType == null) return 'The shareType cannot be empty';    if (shareType == ShareType.images) {      if (imagesPath == null || imagesPath.isEmpty) return 'The shareType cannot be empty';    }    if (content == null && imagesPath == null) return 'A share parameter must be passed content or imagesPath';    if (content != null && imagesPath != null) return 'Only one parameter can be passed';    return await curiosityChannel.invokeMethod('systemShare', <String, dynamic>{      'title': title,      'content': content,      'type': shareType.toString().split('.')[1],      'imagesPath': imagesPath    });  }  ///判断GPS是否开启，GPS或者AGPS开启一个就认为是开启的  static Future<bool> getGPSStatus() async {    if (InternalTools.supportPlatform()) return null;    return await curiosityChannel.invokeMethod('getGPSStatus');  }  ///跳转到GPS定位权限设置页面  static Future<bool> jumpGPSSetting() async {    if (InternalTools.supportPlatform()) return null;    if (isIOS()) return await jumpAppSetting();    if (isAndroid()) return await curiosityChannel.invokeMethod('jumpGPSSetting');    return false;  }  ///跳转到App权限设置页面  static Future<bool> jumpAppSetting() async {    if (InternalTools.supportPlatform()) return null;    return await curiosityChannel.invokeMethod('jumpAppSetting');  }}