package flutter.curiosity.toolsimport android.content.pm.PackageInfoimport android.content.pm.PackageManagerimport android.database.Cursorimport android.graphics.Bitmapimport android.net.Uriimport android.os.Buildimport android.os.Environmentimport android.provider.MediaStoreimport android.util.Logimport androidx.core.content.ContextCompatimport flutter.curiosity.CuriosityPlugin.Companion.contextimport io.flutter.BuildConfigimport java.io.*import java.text.DecimalFormatobject Tools {    /**     * 获取指定文件夹的大小     *     * @param file     * @return     */    fun getDirectorySize(file: File): String {        val size = StringBuilder()        val list = file.listFiles()                ?: //4.2的模拟器空指针。                return "0.00KB" //文件夹目录下的所有文件        for (value in list) {            if (value.isDirectory) { //判断是否父目录下还有子目录                size.append(getDirectorySize(value))            } else {                size.append(getFileSize(value))            }        }        return if (size.toString() == "") "0.00KB" else size.toString()    }    /**     * 获取指定文件的大小     *     * @return     * @throws Exception     */    fun getFileSize(file: File): String {        var size: Long = 0        if (file.exists()) {            var fis: FileInputStream? = null            try {                fis = FileInputStream(file) //使用FileInputStream读入file的数据流                size = fis.available().toLong() //文件的大小            } catch (e: IOException) {                e.printStackTrace()            } finally {                try {                    if (BuildConfig.DEBUG && fis == null) {                        error("Assertion failed")                    }                    fis!!.close()                } catch (e: IOException) {                    e.printStackTrace()                }            }        }        return formatFileSize(size)    }    /**     * 转换文件大小     *     * @param fileSize     * @return     */    private fun formatFileSize(fileSize: Long): String {        val df = DecimalFormat("#.00")        val fileSizeString: String        val wrongSize = "0B"        if (fileSize == 0L) {            return wrongSize        }        fileSizeString = when {            fileSize < 1024 -> {                df.format(fileSize.toDouble()) + "B"            }            fileSize < 1048576 -> {                df.format(fileSize.toDouble() / 1024) + "KB"            }            fileSize < 1073741824 -> {                df.format(fileSize.toDouble() / 1048576) + "MB"            }            else -> {                df.format(fileSize.toDouble() / 1073741824) + "GB"            }        }        return fileSizeString    }    /**     * 给定根目录，返回一个相对路径所对应的实际文件名.     *     * @param baseDir     指定根目录     * @param absFileName 相对路径名，来自于ZipEntry中的name     * @return java.io.File 实际的文件     */    fun getRealFileName(baseDir: String, absFileName: String): File {        val dirs = absFileName.split("/").toTypedArray()        var ret = File(baseDir)        var substr: String        if (dirs.size > 1) {            for (i in 0 until dirs.size - 1) {                substr = dirs[i]                try {                    substr = String(substr.toByteArray(charset("8859_1")))//, "GB2312")                } catch (e: UnsupportedEncodingException) {                    e.printStackTrace()                }                ret = File(ret, substr)            }            if (!ret.exists()) ret.mkdirs()            substr = dirs[dirs.size - 1]            try {                substr = String(substr.toByteArray(charset("8859_1")))//, "GB2312")            } catch (e: UnsupportedEncodingException) {                e.printStackTrace()            }            ret = File(ret, substr)            return ret        }        return ret    }    /**     * 判断是否有该路径     *     * @param path     * @return     */    fun isDirectoryExist(path: String): Boolean {        val file = File(path)        return file.exists()    }    /**     * 检测是否有权限     */    fun checkPermission(permission: String): Boolean {        return ContextCompat.checkSelfPermission(context, permission) ==                PackageManager.PERMISSION_DENIED    }    /**     * 打印日志     */    fun logInfo(content: String) {        Log.i("Curiosity--- ", content)    }    fun resultInfo(info: String): String {        return "Curiosity:$info"    }    fun resultFail(): String {        return "Curiosity:fail"    }    fun resultSuccess(): String {        return "Curiosity:success"    }    /**     * uri获取真实路径     */    fun getRealPathFromURI(contentURI: Uri?): String? {        val result: String        val cursor: Cursor = contentURI?.let { context.contentResolver.query(it, null, null, null, null) }!!        cursor.moveToFirst()        val idx: Int = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA)        result = cursor.getString(idx)        cursor.close()        return result    }    /**     * 保存bitmap方法     */    fun saveBitmap(bitmap: Bitmap): String? {        val filePath = File(context.getExternalFilesDir(Environment.DIRECTORY_DCIM), System.currentTimeMillis().toString() + ".JPEG")        if (filePath.exists()) {            filePath.delete()        }        try {            val out = FileOutputStream(filePath)            bitmap.compress(Bitmap.CompressFormat.JPEG, 90, out)            out.flush()            out.close()            return filePath.absolutePath.toString()        } catch (e: FileNotFoundException) {        }        return null    }    /**     * 获取版本号     */    fun getLongVersionCode(info: PackageInfo): Long {        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {            info.longVersionCode        } else info.versionCode.toLong()    }    /**     * 获取储存路径     */    fun getExternalDirectory(directory: String?): String {        return context.getExternalFilesDir(directory)?.path.toString()    }    /**     * Bitmap 转 bytes     */    fun bitmapToBytes(bitmap: Bitmap): ByteArray {        logInfo(bitmap.width.toString())        logInfo(bitmap.height.toString())        val out = ByteArrayOutputStream()        bitmap.compress(Bitmap.CompressFormat.JPEG, 90, out)        return out.toByteArray()    }}